openapi: 3.0.1

info:
  description: |
    This is the version of the Financial Transaction Enrichment API (TXE-API).
  version: 1.1.0
  title: ecolytiq TXEnrichment API v1.1 (SaaS 2.4.0)
  contact:
    email: support@ecolytiq.com
    name: ecolytiq GmbH
    url: https://ecolytiq.com
  termsOfService: https://ecolytiq.com/imprint
  x-logo:
    url: "https://developer.ecolytiq.com/assets/logo.png"
    backgroundColor: "#F9F9F9"
    altText: "ecolytiq GmbH"

tags:
  - name: enrichment-service
    description: |
      Operations for enriching transaction records.
  - name: profile-service
    description: |
      Operations for managing user profiles with additional information from end users. Some features have been added to the API already, but because we are still working on the implementation details, there is no guarantee that those functions will be available in the next version.

paths:
  /txp/transaction:
    post:
      summary: Process a single transaction (TXItem) with the default transaction processor.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TXItem'
        description: |
          In general, you can either process single transactions the way they appear or send them in bulk (â€¦/range).
      parameters:
        - in: query
          name: modelRegionCode
          schema:
            type: string
            enum:
              - DE
              - UK
              - FR
              - US
          required: false
          example: "DE"
          description: |
                      The region code of the CO2 model which will be used for enrichment.
        - in: query
          name: contentCodes
          schema:
            type: string
          required: false
          example: "loop,comparables,compensation,model,item,profile"
          description: |
                      The list of named content items is an optional argument. If provided, the server will bundle only the requested content items in the response. Results can be optimized for faster responses with less content (which can be loaded later on) or for small number of service interactions with as much information per response as possible. By default we provide feedback_questions and compensation_options which can be selected individually via loop & comp content codes (default item).
      description: |
        This will create a transaction (TXItem) within the system and an immediate enriched transaction (GreenTXItem) as a result. 
      responses:
        '200':
          description: |
            GreenTXItem is a single enriched TXItem. This means, the response contains an enriched transaction item based on the calculated CO2-footprint the TXItem has.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GreenTXItem'
        '400':
          description: |
            bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - enrichment-service
  
        
  /txp/transaction/range:
    post:
      summary: Processes a range of individual transactions (TXItems) with the default transaction processor.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                txItems:
                  type: array
                  items:
                    $ref: '#/components/schemas/TXItem'
                reportCodes:
                  type: array
                  items:
                    type: string    
                    example: "default"
                  description: |
                    The list of named reports (report codes) is an optional argument. If provided, the server will calculate the results for the current profile in the background, so that a client can request a report at any later point in time.
                contentCodes:
                  type: array
                  items:
                    type: string    
                    description: |
                      The list of named content items is an optional argument. If provided, the server will bundle only the requested content items in the response. Results can be optimized for faster responses with less content (which can be loaded later on) or for small number of service interactions with as much information per response as possible. By default we provide feedback_questions and compensation_options which can be selected individually via loop & comp content codes (default item).
        description: |
          In general, you can either process single transactions the way they appear or send them in bulk. Our default transaction quota is set to 100. This is a soft-limit and will change into a hard-limit in the next version.
      parameters:
        - in: query
          name: modelRegionCode
          schema:
            type: string
            enum:
            - DE
            - UK
            - FR
            - US
          required: false
          example: "DE"
          description: |
                      The region code of the CO2 model which will be used for enrichment.
      description: |
        This will create transactions (TXItem) within the system and an immediate enriched transactions (GreenTXItem) as a result.
      responses:
        '200':
          description: |
            GreenTXItem is a single enriched TXItem. This means, the response contains an enriched transaction item based on the calculated CO2-footprint the TXItem has.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GreenTXItem'
        '400':
          description: |
            bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - enrichment-service

  "/txp/profile/{profile_id}":
    get:
      tags:
      - profile-service 
      summary: Finds a user profile by its ID.
      description: Snapshot of the current user profile
      operationId: findProfile
      parameters:
      - name: profile_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The profile has been found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CustomerProfile"
        '404':
          description: The profile ID is unknown.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"

    delete:
      tags:
      - profile-service 
      summary: Deletes a user profile immediately.
      description: Deletes a user profile, all transactions, and all answers the user
        made.
      operationId: deleteProfile
      parameters:
      - name: profile_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The profile has been deleted.
        '404':
          description: The profile ID is unknown.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"

  "/txp/transaction/{transaction_id}/answer":
    post:
      tags:
      - profile-service 
      summary: Saves an answer to a question in the context of a transaction.
      operationId: saveTransactionAnswer
      parameters:
      - name: transaction_id
        in: path
        description: A transaction UUID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContextAnswer"
        required: true
      responses:
        '200':
          description: The answer has been saved.
        '400':
          description: There is an error in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '404':
          description: The transaction ID is unknown.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"

  "/txp/profile/{profile_id}/answer":
    post:
      tags:
      - profile-service 
      summary: Saves an answer to a question in the context of a profile.
      description: Similar to the answer/transaction call but on a profile level.
      operationId: saveProfileAnswer
      parameters:
      - name: profile_id
        in: path
        description: A user profile ID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContextAnswer"
        required: true
      responses:
        '200':
          description: The answer has been saved.
        '400':
          description: There is an error in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '404':
          description: The profile ID is unknown.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        
servers:
  - description: ecolytiq API (Sandbox)
    url: https://api.sandbox.api-ecolytiq.com
  - description: ecolytiq API (Stage)
    url: https://stage-apps.ecolytiq.io
  - description: ecolytiq API (Production)
    url: https://apps.ecolytiq.io

components:

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    TXItem:
      description: |
        A financial transaction which is tracked in a banking account. The
        ecological context of this transaction is represented by a GreenTXItem.
      type: object
      required:
        - transaction_id
        - profile_id
        - currency
        - amount
        - merchant
        - mcc
      properties:
        transaction_id:
          type: string
          example: 54191e00-3d13-11eb-adc1-0242ac120002
          description: |
            a unique Transaction ID - UUID
        profile_id:
          type: string
          example: EF24F98E4FCCFC1A11FED465792F2BA9
          description: |
            a unique customer profile ID - hash / UUID; This information can be managed by the bank or the user.
        account_alias:
          type: string
          example: credit-card-4711
          description: |
            a unique customer account alias, e.g., a hash of the account-nr, or even the name of the account - but never an account-nr in plain text. Will be used for profile analysis. This information is owned by the institution which uses the enrichment service.
        currency:
          $ref: '#/components/schemas/SupportedCurrencyCode'
        amount:
          type: string
          example: "-42.99"
          description: |
            Original amount of the transaction. The amount must be a negative number, since it is a money flow going away from a customer's account.
        description:
          type: string
          example: 'Lidl Vertriebs GmbH & Co., Eutin'
          description: |
            Original transaction description
        merchant:
          type: string
          example: Lidl Vertriebs GmbH & Co.
          description: |
            merchant name
        merchant_address:
          type: string
          example: '23701, Eutin, Germany'
          description: |
            address used with google search; can be fragments of the address.
        merchant_country:
          type: string
          example: Germany
        merchant_city:
          type: string
          example: Eutin
          description: |
            Name of city
        merchant_city_zip:
          type: string
          example: 23701
          description: |
            ZIP-code of city
        merchant_loaction_lat:
          type: string
          example: 52.484800
          description: |
            latitude of merchant loacation (example: Rathaus Berlin)
        merchant_loaction_lon:
          type: string
          example: 13.342900
          description: |
            latitude of merchant loacation  (example: Rathaus Berlin)
        merchant_website:
          type: string
          example: www.lidl.de
        mcc:
          type: string
          example: 5411
          description: |
            Merchant Category Code. If you donâ€™t have it in case of SEPA transaction, please leave it empty and use the category field instead.
        custom_category_system:
          type: string
          example: FTS
          enum:
            - FTS
          description: |
            What category system will be used for processing? In case an MCC value is provided, this field is ignored, otherwise we read the custom_category field as category for processing.          
        custom_category:
          type: string
          example: "K.1.1"
          description: |
            What category of goods or services was purchased. In case you have your own categorisation this can be matched to our catalog.
        custom_language_code:
          type: string
          example: EN
          enum: 
            - DE
            - EN
          description: |
            What is the preferred language for content provided by the system. System default is EN.
        content_detail_level:
          type: string
          example: json (default), url 
          description: |
            For any content you can decide if references to contentsnippets will be provieded as URLs or if all content should be dereferenced and provided in a single call. This holds for CO2Explanations, CO2Insights, CompensationOptions (and other content which will follow).
        datetime:
          type: string
          format: date-time
          example: '2016-11-28T10:34:25Z'
          description: |
            based on ISO 8601
        timezone:
          type: string
          example: Z
          description: |
            based on ISO 8601
        contextAnswers:
          type: array
          items:
            $ref: '#/components/schemas/ContextAnswer'
        last_co2_footprint:
          type: string
          example: 12 g
          description: |
            Specify for correction of total co2 per customer. In case you resend the transaction again and you donâ€™t use the profiling function, please send the last co2 value in this field for internal comparison. 

    GreenTXItem:
      description: |
        GreenTXItem is a single enriched TXItem. This means, the response contains an enriched transaction item based on the calculated CO2-footprint the TXItem has.
      type: object
      required:
        - model_reference
        - tx
        - co2_footprint
        - co2_confidence
      properties:
        response_id:
          type: string
          description: |
            Unique response ID
        model_reference:
          type: string
          description: |
            Reference key for the internal reference model
        tx:
          $ref: '#/components/schemas/TXItem'
        co2_footprint:
          type: string
          example: 10g
          description: |
            calculated CO2-footprint of the transaction
        co2_footprint_value:
          $ref: '#/components/schemas/CO2Footprint'
        co2_confidence:
          type: string
          example: '10%'
          description: | 
            Confidence score in % for the co2 footprint result based several parameters to evaluate volatility of data.
        co2_explanation:
          description: |
            URL for more information around the calculation and factors. If the profile is used, this URL points to the correct language based URL of the explanation if not default language of the model is used. Please note, the URL endpoint will be changed to the box-env soon. 
          type: array
          items:
            $ref: '#/components/schemas/Explanation'
        co2_category: 
          type: string
          example: "Groceries"
          description: |
            ecolytiq transaction classification
        co2_meta_category: 
          type: string
          enum:
            - Food
            - Living
            - Shopping
            - Transport
            - Other
          example: "Food"
          description: |
            ecolytiq transaction classification. The list can be extended!
        co2_comparables:
          description: | 
            A list of comparable activities with a comparable CO2 footprint.
          type: array
          items:
            $ref: '#/components/schemas/Comparable'
        co2_insights:
          type: array
          description: |
            A JSON string of insights, sources and tips around the transaction and merchant.
          items:
            $ref: '#/components/schemas/Insights'
        compensation_status:
          type: integer
          example: 0
          description: |
            0-not-compensated, 1-compensated
        compensation_options:
          type: array
          description: |
            A JSON string of suggestions to offset CO2-price of the transaction
          items:
            $ref: '#/components/schemas/CompensationOption'
        context_questions:
          type: array
          items:
            $ref: '#/components/schemas/ContextQuestion'    
        currency_exchange_info:
          $ref: '#/components/schemas/CurrencyExchangeInfo'    
            
    CustomerProfileRegistration:
      required:
      - account_reference
      - client_id
      - client_type
      type: object
      properties:
        account_reference:
          type: string
          description: a hash which has been created by the client based on the user's
            IBAN
          example: 8743b52063cd84097a65d1633f5c74f5
        client_id:
          type: string
          description: A client id of type FTS must have a length of 40.
          example: GzXLpwwMiw2guAbACXpbOejgcBikO7Fe5Ie3gMbz
        client_type:
          type: string
          description: the type by which the user can be grouped
          example: FTS, GoogleID, AppleID, etc.
          enum:
          - FTS
          - GoogleID
          - AppleID
      description: Used for Survey Product with Fintech Systems / bank-account-based
        ID instead of a managed ID like OpenID etc.
        

    CustomerProfile:
      description: |
        A customer
      type: object
      required:
        - profile_id
      properties:
        profile_id:
          type: string
          example: GzXLpwwMiw2guAbACXpbOejgcBikO7Fe5Ie3gMbz_85266a48-07fa-479e-9233-2b9f342c64c1
          description: |
            A unique user profile ID that conforms to <API_KEY>_<UUID_TYPE_4>
        name:
          type: string
          description: first and last name of the user
          example: Max Mustermann
        email:
          type: string
          description: personal email address of the user
          example: max.mustermann@muster.de
        city:
          type: string
          description: place of residence of the user
          example: Hamburg
        country:
          type: string
          example: Germany
          description: |
            country of home address of the customer
        language:
          type: string
          example: GB
          description: |
            language code for language used based on ISO 639-1
        dob:
          type: string
          description: date of birth based on ISO 8601
          format: date
          example: '1980-10-31'
        gender:
          type: string
          description: M = male, F = female, D = diverse
          example: F
          enum:
          - M
          - F
          - D
        iban:
          type: string
          example: DE91100000000123456789
          description: |
            'Consumer IBAN adopted under ISO 13616 - necessary for compensation_model: cm_dd (direct debit)'
        co2_per_category:
          type: array
          description: emission values per category
          items:
            "$ref": "#/components/schemas/Emission"
        compensation_model:
          type: string
          example: COMPENSATION_DEFAULT
          description: |
            reference key for the compensation mode
        profile_answers:
          type: array
          description: ContextAnswers given by the user in the context of a profile.
          items:
            $ref: '#/components/schemas/ContextAnswer'
        tx_answers:
          type: array
          description: ContextAnswers given by the user in the context of a transaction.
          items:
            $ref: '#/components/schemas/ContextAnswer'
        preferred_model:
          items:
            $ref: '#/components/schemas/TXProcessorSetup'
          example: >-
            Default profile model - this can be overwritten on a transaction
            basis.
    
    CustomerProfilePatchRequestBody:
      description: |
        A customer
      type: object
      required:
        - profile_id
      properties:
        profile_id:
          type: string
          example: GzXLpwwMiw2guAbACXpbOejgcBikO7Fe5Ie3gMbz_85266a48-07fa-479e-9233-2b9f342c64c1
          description: |
            A unique user profile ID that conforms to <API_KEY>_<UUID_TYPE_4>
        name:
          type: string
          description: first and last name of the user
          example: Max Mustermann
        email:
          type: string
          description: personal email address of the user
          example: max.mustermann@muster.de
        city:
          type: string
          description: place of residence of the user
          example: Hamburg
        country:
          type: string
          example: Germany
          description: |
            country of home address of the customer
        language:
          type: string
          example: GB
          description: |
            language code for language used based on ISO 639-1
        dob:
          type: string
          description: date of birth based on ISO 8601
          format: date
          example: '1980-10-31'
        gender:
          type: string
          description: M = male, F = female, D = diverse
          example: F
          enum:
          - M
          - F
          - D
    
    CustomerProfileComponents:
      description: |
        A customer's profile for rendering views in a client UI.
      type: object
      required:
        - profile_id
      properties:
        profile_id:
          type: string
          example: GzXLpwwMiw2guAbACXpbOejgcBikO7Fe5Ie3gMbz_85266a48-07fa-479e-9233-2b9f342c64c1
          description: |
            A unique customer profile ID.
        name:
          type: string
          example: Max Mustermann
          description: |
            First and last name of the customer
        email:
          type: string
          example: max.mustermann@muster.de
          description: |
            personal email-address of the customer
        data_to_plot:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
          description: |
            A set of key-value pairs which contains all properties to poulate a screen or chart template. Must contain a report_name element so that the client can reason the context of the data. 
        profile_components:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
          description: |
            A set of key-value pairs which contains properties of a Cutomer profile.
            
    CustomerProfileReport:
      type: object
      properties:
        data_to_plot:
          type: object
          additionalProperties:
            type: object
            description: A set of key-value pairs which contains all properties to
              populate a screen or chart template.
            example:
              footprint_in_gco2_annually: 7600000
              peer_group_comparison: average
          description: A set of key-value pairs which contains all properties to populate
            a screen or chart template.
          example:
            footprint_in_gco2_annually: 7600000
            peer_group_comparison: average
        profile_components:
          "$ref": "#/components/schemas/CustomerProfileComponents"        
    
    Emission:
      type: object
      properties:
        eco_category:
          type: string
          description: a category group or meta category to Ecolytiq categories
          example: shopping
        co2_value:
          type: string
          description: the emission CO2 value
          example: 70500 g
      description: emission values per category
    
    Insights:
      description: |
        A JSON string of insights, sources and tips around the transaction and merchant.
      type: object
      required:
        - insight_id
        - description
        - language
        - source
      properties:
        insight_id:
          type: string
          description: |
            unique reference key for our insights
        description:
          type: string
          example: "Did you know, red meat has and 4x times higher impact than white meat? ..."
          description: |
            a transaction related insight, tip or trick for the consumer
        language:
          type: string
          example: "GB"
          description: |
            based on ISO 639-1 language codes
        source:
          type: string
          example: "https://registry.euosr.com/insights/xyz"
          description: |
            URL for more information about the given facts or tips
        description_url:
          type: string
          description: |
            URL for loading the raw content of the knowledge item. 
        raw_content:
          type: string
          description: |
            Resolved content which is also available via description_url. 
            
    Explanation:
      description: |
        For a particular action, we provide information about comparable actions with the same CO2. This can help the user to get an understanding of his personal impact. It gives a hint regarding compensation on a very personal level.  
      type: object
      required: 
        - source
      properties:
        description_url:
          type: string
          example: "https://registry.euosr.com/explanation/12/"
          description: |
            URL for more information around the calculation and factors. If the profile is used, this URL points to the correct language based URL of the explanation if not default language of the model is used. Please note, the URL endpoint will be changed to the box-env soon. 
        raw_content:
          type: string
          description: |
            Resolved content which is also available via description_url. 
          example: "The footprint of fuel sounds quite simple, but is actually more complex. There are different perspectives. Well-to-Wheel (WtW) ..."  
        source:
          type: string
          example: "https://registry.euosr.com/explanation/12/source"
          description: |
           URL for more information about the explanation - link to the original source or ecolytiq factbase.  
    
    Comparable:
      description: |
        For a particular action, we provide information about comparable actions with the same CO2. This can help the user to get an understanding of his personal impact. It gives a hint regarding compensation on a very personal level.  
      type: object
      required: 
        - description
        - source
      properties:
        description:
          type: string
          example: "xCO2 equals to xKM of driving with a car by x liters of fuel..."
          description: |
            A short description about the comparable action or product.
        source:
          type: string
          example: "https://registry.euosr.com/facts/xyz/"
          description: |
           URL for more information about the fact - link to the original source or ecolytiq factbase.      
    
    ContextQuestion:
      required:
        - question_id
        - question_type
        - text
        - language
      properties:
        question_id:
          type: string
          example: FOOD_DIET
          description: |
            Reference key for the questions to specific and distinquish similar transaction with different CO2-values.
        question_type:
          type: string
          example: P
        question_flow_iteration_level:
          type: string
          example: 1
          description: |
            How often has this question been asked before.
        question_flow_previous_question:
          type: string
          example: FOOD_HABIT
          description: |
            Reference key for the question previously asked to specific and distinguish similar transactions with different CO2-values.
        question_context:
          type: string
          example: ecolytiq-category
          description: |
            Context of the question related to the type of transaction. Our primary context is the ecolytiq-category.
        text:
          type: string
          example: What's your diet?
          description: |
            The specific question in the model or profile defined language for the customer.
        language:
          type: string
          example: GB
          description: |
            language code for language used based on ISO 639-1
        widget_type:
          type: string
          example: slider
          description: |
            the type of the UI widget which is used in a frontend (can be slider, dropdown, textfield)
        expected_response_cardinality:
          type: string
          example: 5
          description: |
            number of possible answers displayed
        initial_response_selection_index:
          type: string
          example: 3
          description: |
            index of the element which is initially selected in the custom CO2 view
        expected_response_options:
          type: array
          items:
            type: string
          example:
            - meat-based
            - mixed
            - reduced meat
            - vegetarian
            - vegan
          description: |
            possible answers
        expected_response_impact_offset:
          type: array
          items:
            type: number
          example:
            - 0
            - 0
            - 0
            - 0
            - 0
        expected_response_impact_factor:
          type: array
          items:
            type: number
          example:
            - 1.3
            - 1
            - 0.9
            - 0.7
            - 0.6
    
    ContextAnswer:
      description: |
        The element specifies certain questions and answers for our feedback loop. 
      required:
        - question_id
        - answer
      properties:
        question_id:
          type: string
          example: FOOD_DIET
          description: |
            Reference key for the questions to specific and distinquish similar transaction with different CO2-values.
        question_context:
          type: string
          example: PROFILE
          description: |
            Context of the question related to the type of transaction. Can be PROFILE or TX.
        answer_index:
          type: integer
          example: 3
          description: |
            The index of the selected answer chosen by the customer to the specified question. Starts with 0.
        answer_text:
          type: string
          example: Free text answer given by a customer.
          description: |
            Free text answer given by a customer to the specified question. 
        ask_time:
          type: string
          example: 2013-07-16T19:23:51Z
          description: |
            The time when a question was presented first to the user in a client app. Local time of the customer.
        answer_time_zone:
          type: string
          example: CEST
        answer_time:
          type: string
          example: 2013-07-16T19:23:51Z
          description: |
            The time when a customer answers the question. Will be used to analyse and improve our feedback loops. Local time of the customer.

    CompensationProject:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        picture:
          type: array
          items:
            type: string
            format: byte
        picture_html:
          type: string
        categories:
          type: string
        link:
          type: string
        state:
          type: integer
          format: int32
        compensation_api_def:
          type: string

    CompensationOption:
      description: |
        A JSON string of suggestions to offset CO2-price of the transaction
      type: object
      required:
        - compensation_id
        - description
        - source
        - price
        - currency
        - suggestion
      properties:
        compensation_id:
          type: string
          example: p12-a
          description: |
           reference key for the compensation factor
        description:
          type: string
          example: puro.earth
          description: |
           a short description about the compensation action and how it works
        source:
          type: string
          example: "https://puro.earth/"
          description: |
           URL for more information about the compensation action
        price:
          type: number
          example: 35.00
          description: |
           price per kg/CO2
        currency:
          type: string
          example: EUR
          description: |
             currency in which the compensation is done (ISO 4217) based either on model or profile
        suggestion:
          type: number
          example: 0.10
          description: |
           suggested price to offset 100% of the transaction
        description_url:
          type: string
          description: |
            URL for loading the raw content of the knowledge item. 
        raw_content:
          type: string
          description: |
            Resolved content which is also available via description_url.    
    
    Compensation:
      description: |
        The compensation call allows to trigger a offset transaction on the basis of a enriched transaction.
      type: object
      required:
        - transaction_id
        - profile_id
        - compensation_id
        - amount
        - currency
      properties:
        transaction_id:
          type: string
          example: 54191e00-3d13-11eb-adc1-0242ac120002
          description: |
            the original transaction ID, used as reference via the Enrich Transaction call - UUID
        profile_id:
          type: string
          example: EF24F98E4FCCFC1A11FED465792F2BA9
          description: |
            the original profile ID, used as reference within the Enrich Transaction call - UUID
        compensation_project_id:
          type: string
          example: p12-a
          description: |
            'Compensation ID provided by the Enrich Transaction call as part of the Object: CompensationOption'
        amount:
          type: number
          example: 1.12
          description: |
            compensation amount chosen by the consumer.
        currency:
          type: string
          example: EUR
          description: |
            currency in which the compensation is done (ISO 4217) based either on model or profil, default EUR
  
    CompensationAction:
      description: |
        Data about a particular compensation activity which can happen even without a relation to a particular transaction.
      type: object
      required:
        - compensation_id
        - amount
        - currency
      properties:
        compensation_id:
          type: string
          example: p12-a
          description: |
            'compensation ID provided by the Enrich Transaction call as part of the Object: CompensationOption'
        amount:
          type: number
          example: 1.12
          description: |
            total amount to be compensated
        currency:
          type: string
          example: EUR
          description: |
             currency in which the compensation is done (ISO 4217) based either on model or profil, default EUR
        category:
          type: string
          example: "Groceries"
          description: |
            transaction categories to compensate
        
    CompensationResult:
      description: |
        â€¦
      type: object
      required: 
        - original_request
        - compensation_model
        - status
        - settlement_status
      properties:
        compensation_project: 
          type: integer
          example: 3
          description: |
            reference key for the compensation project id.
        original_request:
          type: array
          description: |
            the original compensation request
          items:
            $ref: '#/components/schemas/Compensation'
        compensation_model:
          type: string
          example: COMPENSATION_DEFAULT
          description: |
            reference key for the compensation model. e.g. direct debits or default
        status:
          type: string
          example: success
          description: |
            'success or failed'
        settlement_status:
          type: string
          example: settled
          description: |
            'pending or settled'
            
    TXProcessorSetup:
      description: |
        Model configuration
      type: object
      required:
        - co2
        - insights
        - compensation
      properties:
        co2:
          type: string
          example: CO2_DEFAULT_EN
          description: |
            Reference key for the CO2 model
        insights:
          type: string
          example: INSIGHTS_DEFAULT_EN
          description: |
            Reference key for the insights model
        compensation:
          type: string
          example: COMPENSATION_DEFAULT_EN
          description: |
            Reference key for the compensation model
            
    KeyValuePair:
      required:
        - key
        - value
      properties:
        key:
          type: string
        value:
          type: string
          
    Error:
      description: |
        Error messages for API clients.
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
          
    SupportedCurrencyCode:
        type: string
        description: Supported currencies (ISO 4217). The list of supported currency codes can be extended!
        enum:
          - AED
          - AFN
          - ALL
          - AMD
          - ANG
          - AOA
          - ARS
          - AUD
          - AWG
          - AZN
          - BAM
          - BBD
          - BDT
          - BGN
          - BHD
          - BIF
          - BMD
          - BND
          - BOB
          - BRL
          - BSD
          - BTC
          - BTN
          - BWP
          - BYN
          - BYR
          - BZD
          - CAD
          - CDF
          - CHF
          - CLF
          - CLP
          - CNY
          - COP
          - CRC
          - CUC
          - CUP
          - CVE
          - CZK
          - DJF
          - DKK
          - DOP
          - DZD
          - EGP
          - ERN
          - ETB
          - EUR
          - FJD
          - FKP
          - GBP
          - GEL
          - GGP
          - GHS
          - GIP
          - GMD
          - GNF
          - GTQ
          - GYD
          - HKD
          - HNL
          - HRK
          - HTG
          - HUF
          - IDR
          - ILS
          - IMP
          - INR
          - IQD
          - IRR
          - ISK
          - JEP
          - JMD
          - JOD
          - JPY
          - KES
          - KGS
          - KHR
          - KMF
          - KPW
          - KRW
          - KWD
          - KYD
          - KZT
          - LAK
          - LBP
          - LKR
          - LRD
          - LSL
          - LTL
          - LVL
          - LYD
          - MAD
          - MDL
          - MGA
          - MKD
          - MMK
          - MNT
          - MOP
          - MRO
          - MUR
          - MVR
          - MWK
          - MXN
          - MYR
          - MZN
          - NAD
          - NGN
          - NIO
          - NOK
          - NPR
          - NZD
          - OMR
          - PAB
          - PEN
          - PGK
          - PHP
          - PKR
          - PLN
          - PYG
          - QAR
          - RON
          - RSD
          - RUB
          - RWF
          - SAR
          - SBD
          - SCR
          - SDG
          - SEK
          - SGD
          - SHP
          - SLL
          - SOS
          - SRD
          - STD
          - SVC
          - SYP
          - SZL
          - THB
          - TJS
          - TMT
          - TND
          - TOP
          - TRY
          - TTD
          - TWD
          - TZS
          - UAH
          - UGX
          - USD
          - UYU
          - UZS
          - VEF
          - VND
          - VUV
          - WST
          - XAF
          - XAG
          - XAU
          - XCD
          - XDR
          - XOF
          - XPF
          - YER
          - ZAR
          - ZMK
          - ZMW
          - ZWL
        example: EUR
        
    CurrencyExchangeInfo:
      description: |
        Currency rate for transaction currency and model currency
      type: object
      required:
        - from
        - to
        - rate
      properties:
        from:
          $ref: '#/components/schemas/Amount'
        to:
          $ref: '#/components/schemas/Amount'
        rate:
          type: string
          format: bigdecimal
          example: 1
    
    Amount:
      description: |
        Amount object
      type: object
      required:
        - amount
        - currency_code
      properties:
        amount:
          type: number
          format: bigdecimal
          example: -42.99
        currency_code:
          $ref: '#/components/schemas/SupportedCurrencyCode'
      
    CO2Footprint:
      description: |
        CO2Footprint object
      type: object
      required:
        - value
        - unit
      properties:
        value:
          description: value of co2 footprint
          type: number
          format: bigdecimal
          example: 10
        unit:
          description: unit of co2 footprint
          type: string
          enum: 
            - g
            - kg
          example: g
          
# WWe apply the security globally to all operations
security:
  - bearerAuth: []  
          
x-aws-api-id: '96l0smgin2'